"""
This security layer inadequately handles A/B storage for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
""" 

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.filename = filename
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if (create or (self.filename in listfiles())):
      self.ogfile = openfile(self.filename, create)
      self.Afile = openfile(self.Afn,True)
      self.Bfile = openfile(self.Bfn,True)
      content = self.ogfile.readat(None, 0)

      if (content == ""):
        content = "SE"
      if (content[0] != "S" and content[-1] != "E"):
        content = "S" + content
        content = content + "E"
      self.Afile.writeat(content, 0)
      self.Bfile.writeat(self.ogfile.readat(None, 0), 0)

    else:
      pass


  def writeat(self,data,offset):    
    # Write the requested data to the B file using the sandbox's writeat call
    if (offset < 0 or offset > len(self.Bfile.readat(None,0))):
      pass
    else:
      try:
        self.Bfile.writeat(data,offset)
      except:
        pass

  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try:
      result = self.Afile.readat(bytes,offset)
    except:
      pass
    return result


  def close(self):
    aValid = False
    bValid = False  
    aContent = self.Afile.readat(None, 0)
    bContent = self.Bfile.readat(None, 0)
    
    try:
      # Check if A is valid
      if (aContent[0] == "S" and aContent[-1] == "E"):
        aValid = True

      # Check if B is valid
      if (bContent[0] == "S" and bContent[-1] == "E"):
        bValid = True


      # If A and B are valid, replace original with B
      if (aValid and bValid):
        self.ogfile.close()
        removefile(self.filename)
        self.ogfile = openfile(self.filename, True)
        self.ogfile.writeat(bContent, 0)
      
      # If only B is valid, replace original with A  
      elif (aValid == True and bValid == False):
        self.ogfile.close()
        removefile(self.filename)
        self.ogfile = openfile(self.filename, True)
        self.ogfile.writeat(aContent, 0)
    
    except:
      pass


    self.ogfile.close()
    self.Afile.close()
    self.Bfile.close()
    removefile(self.Afn)
    removefile(self.Bfn)


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()